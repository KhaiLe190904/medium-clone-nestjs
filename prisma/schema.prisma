generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique(map: "User_email_key")
  username  String   @unique(map: "User_username_key")
  password  String
  bio       String?  @default("")
  image     String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  token     String?

  followers Follow[]   @relation("UserFollowers")
  following Follow[]   @relation("UserFollowing")
  articles  Article[]
  favorites Favorite[]
  comments  Comment[]
}

model Follow {
  id          Int @id @default(autoincrement())
  followerId  Int
  followingId Int

  follower  user @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following user @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Article {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  title          String
  description    String
  body           String
  tagList        String   @default("[]")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  favoritesCount Int      @default(0)

  authorId  Int
  author    user       @relation(fields: [authorId], references: [id])
  favorites Favorite[]
  comments  Comment[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("favorites")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("comments")
}
